import traceback

import pyperclip
from flask import send_file
from selenium import webdriver
from selenium.webdriver import Keys
from selenium.webdriver.chrome.service import Service
from webdriver_manager.chrome import ChromeDriverManager
import time
from selenium.webdriver.common.action_chains import ActionChains
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC
from selenium.webdriver.common.by import By
from selenium.webdriver.chrome.service import Service


def post_to_tistory(username, password, blog_name, title_text, content_text):
    # ÎìúÎùºÏù¥Î≤Ñ Ïã§Ìñâ
    options = webdriver.ChromeOptions()

    options.add_argument("--headless=new")
    options.add_argument("--no-sandbox")
    options.add_argument("--disable-dev-shm-usage")
    options.add_argument("--disable-gpu")
    options.add_argument("--window-size=1920,1080")
    options.add_argument("--start-maximized")         # <<< Ïù¥Í±∞ÎèÑ Ï∂îÍ∞Ä
    options.add_argument(
        "user-agent=Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/114.0.0.0 Safari/537.36"
    )
    options.add_argument("--disable-blink-features=AutomationControlled")
    options.add_experimental_option("excludeSwitches", ["enable-automation"])
    options.add_experimental_option('useAutomationExtension', False)

    service = Service("/usr/local/bin/chromedriver-linux64/chromedriver")
    driver = webdriver.Chrome(service=service, options=options)

    try:
        # 1. Ìã∞Ïä§ÌÜ†Î¶¨ Î°úÍ∑∏Ïù∏ ÌéòÏù¥ÏßÄ Ï†ëÏÜç
        driver.get("https://www.tistory.com/auth/login")
        time.sleep(2)

        # 2. "Ïπ¥Ïπ¥Ïò§Í≥ÑÏ†ïÏúºÎ°ú Î°úÍ∑∏Ïù∏" Î≤ÑÌäº ÌÅ¥Î¶≠
        kakao_login_btn = driver.find_element(By.CLASS_NAME, "link_kakao_id")
        kakao_login_btn.click()
        time.sleep(3)

        # 3. Ïπ¥Ïπ¥Ïò§ Î°úÍ∑∏Ïù∏ Ï∞ΩÏóêÏÑú ID, ÎπÑÎ∞ÄÎ≤àÌò∏ ÏûÖÎ†•
        email_input = driver.find_element(By.NAME, "loginId")
        password_input = driver.find_element(By.NAME, "password")

        # üëâ ÏûÖÎ†•Í∞í Ï¥àÍ∏∞Ìôî
        email_input.send_keys(Keys.CONTROL + "a")
        email_input.send_keys(Keys.DELETE)

        password_input.send_keys(Keys.CONTROL + "a")
        password_input.send_keys(Keys.DELETE)

        # üëâ Í∞í ÏûÖÎ†•
        email_input.send_keys(username)
        password_input.send_keys(password)

        # 4. Î°úÍ∑∏Ïù∏ Î≤ÑÌäº ÌÅ¥Î¶≠
        login_button = driver.find_element(By.CLASS_NAME, "submit")
        login_button.click()
        time.sleep(5)

        # 4. Í∏ÄÍ¥ÄÎ¶¨ ÌéòÏù¥ÏßÄÎ°ú Ïù¥Îèô
        post_list_url = f"https://{blog_name}.tistory.com/manage/post"
        driver.get(post_list_url)
        time.sleep(2)

        driver.get("https://tistory.com/editor")  # Ïó¨Í∏¥ ÎÑ§Í∞Ä Ïó¥Î†§Îäî Ï£ºÏÜå
        WebDriverWait(driver, 30).until(
            lambda driver: driver.execute_script('return document.readyState') == 'complete'
        )
        driver.save_screenshot('screenshot.png')

        # # 6. Í∏ÄÏì∞Í∏∞ Î≤ÑÌäº ÌÅ¥Î¶≠
        # write_button = WebDriverWait(driver, 10).until(
        #     EC.element_to_be_clickable((By.CLASS_NAME, "link_write"))
        # )
        # write_button.click()
        # time.sleep(2)

        # Ï†úÎ™© ÏûÖÎ†• ÌõÑ, Ï≤´ alert Ï≤òÎ¶¨ (ÏûÑÏãúÏ†ÄÏû• Ïù¥Ïñ¥Ïì∞Í∏∞ Ïó¨Î∂Ä)
        accept_if_alert_present("Ï†úÎ™©",driver, action="dismiss")  # Ï∑®ÏÜå(dismiss)Ìï† Í≤ΩÏö∞
        time.sleep(2)

        # 7. Ï†úÎ™© ÏûÖÎ†•
        title_input = WebDriverWait(driver, 30).until(
            EC.presence_of_element_located((By.ID, "post-title-inp"))
        )
        title_input.clear()
        title_input.send_keys(title_text)

        # 8. HTML Î™®ÎìúÎ°ú Ï†ÑÌôò
        mode_button = WebDriverWait(driver, 10).until(
            EC.element_to_be_clickable((By.ID, "editor-mode-layer-btn-open"))
        )
        mode_button.click()
        time.sleep(1)

        html_mode_option = WebDriverWait(driver, 10).until(
            EC.element_to_be_clickable((By.ID, "editor-mode-html"))
        )
        html_mode_option.click()

        # 9. ÏïåÎ¶º ÌåùÏóÖ(HTMLÎ™®Îìú Í≤ΩÍ≥†) ÌôïÏù∏
        accept_if_alert_present("ÎÇ¥Ïö©", driver, action="accept")  # ÌôïÏù∏(accept)Ìï† Í≤ΩÏö∞
        time.sleep(1)

        # 10. CodeMirror HTML ÏûÖÎ†•Ï∞Ω ÌÅ¥Î¶≠ ÌõÑ ÏûÖÎ†•
        fixed_text = content_text

        code_area = WebDriverWait(driver, 10).until(
            EC.element_to_be_clickable((By.CLASS_NAME, "CodeMirror"))
        )
        code_area.click()
        time.sleep(1)

        # Headless Ï≤¥ÌÅ¨
        if driver.execute_script("return navigator.webdriver"):
            # Ìó§ÎìúÎ¶¨Ïä§ Î™®ÎìúÏùº Îïå: send_keys ÏÇ¨Ïö©
            actions = ActionChains(driver)
            actions.send_keys(fixed_text).perform()
        else:
            # ÏùºÎ∞ò Î™®ÎìúÏùº Îïå: ÏõêÎûò ÏΩîÎìú ÏÇ¨Ïö©
            driver.execute_script("""
                const editor = document.querySelector('.CodeMirror').CodeMirror;
                editor.setValue(arguments[0]);
                editor.refresh();
                editor.focus();
                editor.setCursor(editor.lineCount(), 0);
            """, fixed_text)

        time.sleep(3)

        # 11. ÏûÑÏãúÏ†ÄÏû• Î≤ÑÌäº ÌÅ¥Î¶≠
        save_draft_button = WebDriverWait(driver, 10).until(
            EC.element_to_be_clickable((By.CSS_SELECTOR, ".btn.btn-draft .action"))
        )
        save_draft_button.click()
        time.sleep(3)

        return "Post Successful"

    except Exception as e:
        print("‚ùå Ïò§Î•ò Î∞úÏÉù:", e)
        traceback.print_exc()  # Ï†ÑÏ≤¥ ÏóêÎü¨ Ïä§ÌÉù Ï∂úÎ†•
        return str(e)

    finally:
        driver.quit()


def limit_indentation_for_send(text: str, max_indent=4):
    lines = text.splitlines()
    fixed = []
    for line in lines:
        spaces = len(line) - len(line.lstrip())
        allowed = min(spaces, max_indent)
        fixed.append(' ' * allowed + line.lstrip())
    return "\n".join(fixed)


# üîê alert Ï≤òÎ¶¨ Ìï®Ïàò
def accept_if_alert_present(type, driver, action="accept", timeout=5):
    """
    Tistory alertÍ∞Ä Îú®Î©¥ 'ÌôïÏù∏' ÎòêÎäî 'Ï∑®ÏÜå' Ï§ë ÌïòÎÇòÎ•º ÏÑ†ÌÉùÌïòÏó¨ Ï≤òÎ¶¨Ìï®.
    :param driver: Selenium WebDriver
    :param action: 'accept' ÎòêÎäî 'dismiss'
    :param timeout: ÎåÄÍ∏∞ ÏãúÍ∞Ñ
    """
    try:
        WebDriverWait(driver, timeout).until(EC.alert_is_present())
        alert = driver.switch_to.alert

        if action == "accept":
            alert.accept()
        elif action == "dismiss":
            alert.dismiss()
        else:
            print("‚ö†Ô∏è Ïïå Ïàò ÏóÜÎäî action, Í∏∞Î≥∏ ÌôïÏù∏ Ïã§Ìñâ")
            alert.accept()

        WebDriverWait(driver, timeout).until_not(EC.alert_is_present())
        time.sleep(1)

    except Exception as e:
        print("‚ÑπÔ∏è"+ type+ "Alert ÏóÜÏùå ÎòêÎäî Ïù¥ÎØ∏ Îã´Ìûò:", e)